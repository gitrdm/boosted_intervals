// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// interval_add
Rcpp::List interval_add(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_add(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_add(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_subtract
Rcpp::List interval_subtract(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_subtract(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_subtract(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_multiply
Rcpp::List interval_multiply(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_multiply(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_multiply(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_divide
Rcpp::List interval_divide(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_divide(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_divide(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_exp
Rcpp::List interval_exp(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_exp(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_exp(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_expm1
Rcpp::List interval_expm1(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_expm1(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_expm1(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log
Rcpp::List interval_log(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log10
Rcpp::List interval_log10(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log10(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log10(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log1p
Rcpp::List interval_log1p(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log1p(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log1p(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log2
Rcpp::List interval_log2(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log2(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log2(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_sin
Rcpp::List interval_sin(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_sin(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_sin(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_cos
Rcpp::List interval_cos(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_cos(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_cos(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_negate
Rcpp::List interval_negate(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_negate(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_negate(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_width
Rcpp::NumericVector interval_width(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_width(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_width(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_midpoint
Rcpp::NumericVector interval_midpoint(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_midpoint(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_midpoint(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_median
Rcpp::NumericVector interval_median(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_median(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_median(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_equals
Rcpp::LogicalVector interval_equals(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_equals(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_equals(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_less
Rcpp::LogicalVector interval_less(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_less(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_less(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_less_equal
Rcpp::LogicalVector interval_less_equal(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_less_equal(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_less_equal(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_greater
Rcpp::LogicalVector interval_greater(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_greater(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_greater(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_greater_equal
Rcpp::LogicalVector interval_greater_equal(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_greater_equal(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_greater_equal(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_overlaps
Rcpp::LogicalVector interval_overlaps(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_overlaps(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_overlaps(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_contains_interval
Rcpp::LogicalVector interval_contains_interval(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_contains_interval(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_contains_interval(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_contains_point
Rcpp::LogicalVector interval_contains_point(Rcpp::NumericVector lower, Rcpp::NumericVector upper, Rcpp::NumericVector point);
RcppExport SEXP _boostedintervals_interval_contains_point(SEXP lowerSEXP, SEXP upperSEXP, SEXP pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type point(pointSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_contains_point(lower, upper, point));
    return rcpp_result_gen;
END_RCPP
}
// interval_intersection
Rcpp::List interval_intersection(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_intersection(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_intersection(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_union
Rcpp::List interval_union(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_union(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_union(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_abs
Rcpp::List interval_abs(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_abs(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_abs(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_sqrt
Rcpp::List interval_sqrt(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_sqrt(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_sqrt(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_pow
Rcpp::List interval_pow(Rcpp::NumericVector lower, Rcpp::NumericVector upper, Rcpp::IntegerVector exponent);
RcppExport SEXP _boostedintervals_interval_pow(SEXP lowerSEXP, SEXP upperSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_pow(lower, upper, exponent));
    return rcpp_result_gen;
END_RCPP
}
// interval_zero_in
Rcpp::LogicalVector interval_zero_in(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_zero_in(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_zero_in(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_is_empty
Rcpp::LogicalVector interval_is_empty(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_is_empty(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_is_empty(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_subset
Rcpp::LogicalVector interval_subset(Rcpp::NumericVector outer_lower, Rcpp::NumericVector outer_upper, Rcpp::NumericVector inner_lower, Rcpp::NumericVector inner_upper);
RcppExport SEXP _boostedintervals_interval_subset(SEXP outer_lowerSEXP, SEXP outer_upperSEXP, SEXP inner_lowerSEXP, SEXP inner_upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type outer_lower(outer_lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type outer_upper(outer_upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inner_lower(inner_lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inner_upper(inner_upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_subset(outer_lower, outer_upper, inner_lower, inner_upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_proper_subset
Rcpp::LogicalVector interval_proper_subset(Rcpp::NumericVector outer_lower, Rcpp::NumericVector outer_upper, Rcpp::NumericVector inner_lower, Rcpp::NumericVector inner_upper);
RcppExport SEXP _boostedintervals_interval_proper_subset(SEXP outer_lowerSEXP, SEXP outer_upperSEXP, SEXP inner_lowerSEXP, SEXP inner_upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type outer_lower(outer_lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type outer_upper(outer_upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inner_lower(inner_lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inner_upper(inner_upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_proper_subset(outer_lower, outer_upper, inner_lower, inner_upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_radius
Rcpp::NumericVector interval_radius(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_radius(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_radius(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_norm
Rcpp::NumericVector interval_norm(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_norm(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_norm(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_mag
Rcpp::NumericVector interval_mag(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_mag(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_mag(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_mig
Rcpp::NumericVector interval_mig(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_mig(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_mig(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_distance
Rcpp::NumericVector interval_distance(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_distance(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_distance(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_bisect
Rcpp::List interval_bisect(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_bisect(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_bisect(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_widen
Rcpp::List interval_widen(Rcpp::NumericVector lower, Rcpp::NumericVector upper, Rcpp::NumericVector expansion);
RcppExport SEXP _boostedintervals_interval_widen(SEXP lowerSEXP, SEXP upperSEXP, SEXP expansionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type expansion(expansionSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_widen(lower, upper, expansion));
    return rcpp_result_gen;
END_RCPP
}
// interval_tan
Rcpp::List interval_tan(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_tan(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_tan(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_asin
Rcpp::List interval_asin(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_asin(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_asin(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_acos
Rcpp::List interval_acos(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_acos(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_acos(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_atan
Rcpp::List interval_atan(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_atan(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_atan(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_sinh
Rcpp::List interval_sinh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_sinh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_sinh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_cosh
Rcpp::List interval_cosh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_cosh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_cosh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_tanh
Rcpp::List interval_tanh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_tanh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_tanh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_asinh
Rcpp::List interval_asinh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_asinh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_asinh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_acosh
Rcpp::List interval_acosh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_acosh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_acosh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_atanh
Rcpp::List interval_atanh(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_atanh(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_atanh(lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_boostedintervals_interval_add", (DL_FUNC) &_boostedintervals_interval_add, 4},
    {"_boostedintervals_interval_subtract", (DL_FUNC) &_boostedintervals_interval_subtract, 4},
    {"_boostedintervals_interval_multiply", (DL_FUNC) &_boostedintervals_interval_multiply, 4},
    {"_boostedintervals_interval_divide", (DL_FUNC) &_boostedintervals_interval_divide, 4},
    {"_boostedintervals_interval_exp", (DL_FUNC) &_boostedintervals_interval_exp, 2},
    {"_boostedintervals_interval_expm1", (DL_FUNC) &_boostedintervals_interval_expm1, 2},
    {"_boostedintervals_interval_log", (DL_FUNC) &_boostedintervals_interval_log, 2},
    {"_boostedintervals_interval_log10", (DL_FUNC) &_boostedintervals_interval_log10, 2},
    {"_boostedintervals_interval_log1p", (DL_FUNC) &_boostedintervals_interval_log1p, 2},
    {"_boostedintervals_interval_log2", (DL_FUNC) &_boostedintervals_interval_log2, 2},
    {"_boostedintervals_interval_sin", (DL_FUNC) &_boostedintervals_interval_sin, 2},
    {"_boostedintervals_interval_cos", (DL_FUNC) &_boostedintervals_interval_cos, 2},
    {"_boostedintervals_interval_negate", (DL_FUNC) &_boostedintervals_interval_negate, 2},
    {"_boostedintervals_interval_width", (DL_FUNC) &_boostedintervals_interval_width, 2},
    {"_boostedintervals_interval_midpoint", (DL_FUNC) &_boostedintervals_interval_midpoint, 2},
    {"_boostedintervals_interval_median", (DL_FUNC) &_boostedintervals_interval_median, 2},
    {"_boostedintervals_interval_equals", (DL_FUNC) &_boostedintervals_interval_equals, 4},
    {"_boostedintervals_interval_less", (DL_FUNC) &_boostedintervals_interval_less, 4},
    {"_boostedintervals_interval_less_equal", (DL_FUNC) &_boostedintervals_interval_less_equal, 4},
    {"_boostedintervals_interval_greater", (DL_FUNC) &_boostedintervals_interval_greater, 4},
    {"_boostedintervals_interval_greater_equal", (DL_FUNC) &_boostedintervals_interval_greater_equal, 4},
    {"_boostedintervals_interval_overlaps", (DL_FUNC) &_boostedintervals_interval_overlaps, 4},
    {"_boostedintervals_interval_contains_interval", (DL_FUNC) &_boostedintervals_interval_contains_interval, 4},
    {"_boostedintervals_interval_contains_point", (DL_FUNC) &_boostedintervals_interval_contains_point, 3},
    {"_boostedintervals_interval_intersection", (DL_FUNC) &_boostedintervals_interval_intersection, 4},
    {"_boostedintervals_interval_union", (DL_FUNC) &_boostedintervals_interval_union, 4},
    {"_boostedintervals_interval_abs", (DL_FUNC) &_boostedintervals_interval_abs, 2},
    {"_boostedintervals_interval_sqrt", (DL_FUNC) &_boostedintervals_interval_sqrt, 2},
    {"_boostedintervals_interval_pow", (DL_FUNC) &_boostedintervals_interval_pow, 3},
    {"_boostedintervals_interval_zero_in", (DL_FUNC) &_boostedintervals_interval_zero_in, 2},
    {"_boostedintervals_interval_is_empty", (DL_FUNC) &_boostedintervals_interval_is_empty, 2},
    {"_boostedintervals_interval_subset", (DL_FUNC) &_boostedintervals_interval_subset, 4},
    {"_boostedintervals_interval_proper_subset", (DL_FUNC) &_boostedintervals_interval_proper_subset, 4},
    {"_boostedintervals_interval_radius", (DL_FUNC) &_boostedintervals_interval_radius, 2},
    {"_boostedintervals_interval_norm", (DL_FUNC) &_boostedintervals_interval_norm, 2},
    {"_boostedintervals_interval_mag", (DL_FUNC) &_boostedintervals_interval_mag, 2},
    {"_boostedintervals_interval_mig", (DL_FUNC) &_boostedintervals_interval_mig, 2},
    {"_boostedintervals_interval_distance", (DL_FUNC) &_boostedintervals_interval_distance, 4},
    {"_boostedintervals_interval_bisect", (DL_FUNC) &_boostedintervals_interval_bisect, 2},
    {"_boostedintervals_interval_widen", (DL_FUNC) &_boostedintervals_interval_widen, 3},
    {"_boostedintervals_interval_tan", (DL_FUNC) &_boostedintervals_interval_tan, 2},
    {"_boostedintervals_interval_asin", (DL_FUNC) &_boostedintervals_interval_asin, 2},
    {"_boostedintervals_interval_acos", (DL_FUNC) &_boostedintervals_interval_acos, 2},
    {"_boostedintervals_interval_atan", (DL_FUNC) &_boostedintervals_interval_atan, 2},
    {"_boostedintervals_interval_sinh", (DL_FUNC) &_boostedintervals_interval_sinh, 2},
    {"_boostedintervals_interval_cosh", (DL_FUNC) &_boostedintervals_interval_cosh, 2},
    {"_boostedintervals_interval_tanh", (DL_FUNC) &_boostedintervals_interval_tanh, 2},
    {"_boostedintervals_interval_asinh", (DL_FUNC) &_boostedintervals_interval_asinh, 2},
    {"_boostedintervals_interval_acosh", (DL_FUNC) &_boostedintervals_interval_acosh, 2},
    {"_boostedintervals_interval_atanh", (DL_FUNC) &_boostedintervals_interval_atanh, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_boostedintervals(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
