// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// interval_add
Rcpp::List interval_add(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_add(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_add(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_subtract
Rcpp::List interval_subtract(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_subtract(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_subtract(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_multiply
Rcpp::List interval_multiply(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_multiply(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_multiply(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_divide
Rcpp::List interval_divide(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_divide(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_divide(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_negate
Rcpp::List interval_negate(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_negate(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_negate(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_width
Rcpp::NumericVector interval_width(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_width(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_width(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_midpoint
Rcpp::NumericVector interval_midpoint(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_midpoint(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_midpoint(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_equals
Rcpp::LogicalVector interval_equals(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_equals(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_equals(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_less
Rcpp::LogicalVector interval_less(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_less(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_less(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_less_equal
Rcpp::LogicalVector interval_less_equal(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_less_equal(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_less_equal(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_greater
Rcpp::LogicalVector interval_greater(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_greater(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_greater(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_greater_equal
Rcpp::LogicalVector interval_greater_equal(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_greater_equal(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_greater_equal(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_overlaps
Rcpp::LogicalVector interval_overlaps(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_overlaps(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_overlaps(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_contains_interval
Rcpp::LogicalVector interval_contains_interval(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_contains_interval(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_contains_interval(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_contains_point
Rcpp::LogicalVector interval_contains_point(Rcpp::NumericVector lower, Rcpp::NumericVector upper, Rcpp::NumericVector point);
RcppExport SEXP _boostedintervals_interval_contains_point(SEXP lowerSEXP, SEXP upperSEXP, SEXP pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type point(pointSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_contains_point(lower, upper, point));
    return rcpp_result_gen;
END_RCPP
}
// interval_intersection
Rcpp::List interval_intersection(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_intersection(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_intersection(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_union
Rcpp::List interval_union(Rcpp::NumericVector lower1, Rcpp::NumericVector upper1, Rcpp::NumericVector lower2, Rcpp::NumericVector upper2);
RcppExport SEXP _boostedintervals_interval_union(SEXP lower1SEXP, SEXP upper1SEXP, SEXP lower2SEXP, SEXP upper2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower1(lower1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower2(lower2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper2(upper2SEXP);
    rcpp_result_gen = Rcpp::wrap(interval_union(lower1, upper1, lower2, upper2));
    return rcpp_result_gen;
END_RCPP
}
// interval_abs
Rcpp::List interval_abs(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_abs(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_abs(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_sqrt
Rcpp::List interval_sqrt(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_sqrt(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_sqrt(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_pow
Rcpp::List interval_pow(Rcpp::NumericVector lower, Rcpp::NumericVector upper, Rcpp::IntegerVector exponent);
RcppExport SEXP _boostedintervals_interval_pow(SEXP lowerSEXP, SEXP upperSEXP, SEXP exponentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type exponent(exponentSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_pow(lower, upper, exponent));
    return rcpp_result_gen;
END_RCPP
}
// interval_exp
Rcpp::List interval_exp(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_exp(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_exp(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log
Rcpp::List interval_log(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_log10
Rcpp::List interval_log10(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_log10(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_log10(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_sin
Rcpp::List interval_sin(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_sin(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_sin(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// interval_cos
Rcpp::List interval_cos(Rcpp::NumericVector lower, Rcpp::NumericVector upper);
RcppExport SEXP _boostedintervals_interval_cos(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_cos(lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_boostedintervals_interval_add", (DL_FUNC) &_boostedintervals_interval_add, 4},
    {"_boostedintervals_interval_subtract", (DL_FUNC) &_boostedintervals_interval_subtract, 4},
    {"_boostedintervals_interval_multiply", (DL_FUNC) &_boostedintervals_interval_multiply, 4},
    {"_boostedintervals_interval_divide", (DL_FUNC) &_boostedintervals_interval_divide, 4},
    {"_boostedintervals_interval_negate", (DL_FUNC) &_boostedintervals_interval_negate, 2},
    {"_boostedintervals_interval_width", (DL_FUNC) &_boostedintervals_interval_width, 2},
    {"_boostedintervals_interval_midpoint", (DL_FUNC) &_boostedintervals_interval_midpoint, 2},
    {"_boostedintervals_interval_equals", (DL_FUNC) &_boostedintervals_interval_equals, 4},
    {"_boostedintervals_interval_less", (DL_FUNC) &_boostedintervals_interval_less, 4},
    {"_boostedintervals_interval_less_equal", (DL_FUNC) &_boostedintervals_interval_less_equal, 4},
    {"_boostedintervals_interval_greater", (DL_FUNC) &_boostedintervals_interval_greater, 4},
    {"_boostedintervals_interval_greater_equal", (DL_FUNC) &_boostedintervals_interval_greater_equal, 4},
    {"_boostedintervals_interval_overlaps", (DL_FUNC) &_boostedintervals_interval_overlaps, 4},
    {"_boostedintervals_interval_contains_interval", (DL_FUNC) &_boostedintervals_interval_contains_interval, 4},
    {"_boostedintervals_interval_contains_point", (DL_FUNC) &_boostedintervals_interval_contains_point, 3},
    {"_boostedintervals_interval_intersection", (DL_FUNC) &_boostedintervals_interval_intersection, 4},
    {"_boostedintervals_interval_union", (DL_FUNC) &_boostedintervals_interval_union, 4},
    {"_boostedintervals_interval_abs", (DL_FUNC) &_boostedintervals_interval_abs, 2},
    {"_boostedintervals_interval_sqrt", (DL_FUNC) &_boostedintervals_interval_sqrt, 2},
    {"_boostedintervals_interval_pow", (DL_FUNC) &_boostedintervals_interval_pow, 3},
    {"_boostedintervals_interval_exp", (DL_FUNC) &_boostedintervals_interval_exp, 2},
    {"_boostedintervals_interval_log", (DL_FUNC) &_boostedintervals_interval_log, 2},
    {"_boostedintervals_interval_log10", (DL_FUNC) &_boostedintervals_interval_log10, 2},
    {"_boostedintervals_interval_sin", (DL_FUNC) &_boostedintervals_interval_sin, 2},
    {"_boostedintervals_interval_cos", (DL_FUNC) &_boostedintervals_interval_cos, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_boostedintervals(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
